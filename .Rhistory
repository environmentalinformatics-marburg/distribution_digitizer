data_ta_200 <- na.omit(data_ta_200)
View(data_ta_200)
path <- "D:/fragenbogen.csv"
data_ta_200 <- try(read.table(path, skip = 0, header = TRUE, sep=";"),TRUE)
View(data_ta_200)
data_ta_200 <- cbind(data_ta_200$Frage, data_ta_200$Anzahl.der.Auswahlen)
r<- colnames(data_ta_200)<-c('frage','ausw')
data_ta_200$ausw <- as.numeric(data_ta_200$ausw)
path <- "D:/fragenbogen.csv"
data_ta_200 <- try(read.table(path, skip = 0, header = TRUE, sep=";"),TRUE)
data_ta_200 <- cbind(data_ta_200$Frage, data_ta_200$Anzahl.der.Auswahlen)
data_ta_200$Frage <- as.numeric(data_ta_200$Frage)
r<- colnames(data_ta_200)<-c('frage','ausw')
Frage <- as.numeric(data_ta_200$frage)
path <- "D:/fragenbogen.csv"
data_ta_200 <- try(read.table(path, skip = 0, header = TRUE, sep=";"),TRUE)
data_ta_200 <- cbind(data_ta_200$Frage, data_ta_200$Anzahl.der.Auswahlen)
r<- colnames(data_ta_200)<-c('frage','ausw')
Frage <- as.numeric(data_ta_200$frage)
data_ta_200$frage
path <- "D:/fragenbogen.csv"
data_ta_200 <- try(read.table(path, skip = 0, header = TRUE, sep=";"),TRUE)
data_ta_200 <- cbind(data_ta_200$Frage, data_ta_200$Anzahl.der.Auswahlen)
data_ta_200 <- na.omit(data_ta_200)
data_ta_200$Frage
require(grid)
library(ggplot2)
library(reshape)
library(extrafont)
path <- "D:/fragenbogen.csv"
data_ta_200 <- try(read.table(path, skip = 0, header = TRUE, sep=";"),TRUE)
data_ta_200 <- cbind(data_ta_200$Frage, data_ta_200$Anzahl.der.Auswahlen)
data_ta_200 <- na.omit(data_ta_200)
require(grid)
library(ggplot2)
library(reshape)
library(extrafont)
path <- "D:/fragenbogen.csv"
data_ta_200 <- try(read.table(path, skip = 0, header = TRUE, sep=";"),TRUE)
data_ta_200 <- cbind(data_ta_200$Frage, data_ta_200$Anzahl.der.Auswahlen)
path <- "D:/fragenbogen.csv"
data_ta_200 <- try(read.table(path, skip = 0, header = TRUE, sep=";"),TRUE)
data_ta_200 <- cbind(data_ta_200$Frage, data_ta_200$Anzahl.der.Auswahlen)
View(data_ta_200)
r<- colnames(data_ta_200)<-c('frage','ausw')
View(data_ta_200)
Frage <- as.numeric(data_ta_200$frage)
data_ta_200$frage
path <- "D:/fragenbogen.csv"
data_ta_200 <- try(read.table(path, skip = 0, header = TRUE, sep=";"),TRUE)
data_ta_200$Frage
#r<- colnames(data_ta_200)<-c('frage','ausw')
#x_num <- as.numeric(x)
a <- as.numeric(data_ta_200$Anzahl.der.Auswahlen)
a
a<- list(NULL)
a
a <- as.numeric(data_ta_200$Anzahl.der.Auswahlen)
a[is.na(a)] <- 0
#levels(dat_t.mlt_2$Leg) <- c("max", "min")
erg <- cbind(data_ta_200$Frage,   a)
View(erg)
r<- colnames(erg)<-c('frage','aus')
View(erg)
r<- colnames(erg)<-c('frage','ausw')
p1 <- (ggplot(aes(x = frage, y = ausw,
),
data = data_ta_200) +
scale_size_area()+
xlab(NULL)+
ylab(paste(var_Name_r, "%") )+
geom_line(size=1) +
geom_point() +
geom_text(vjust = -0.5,hjust=-0.1, size=3, color="black") +
ggtitle(paste( station , " - ", year)) +
theme(plot.title=element_text(family="Arial", face="bold", size=10)) +
theme(plot.margin = unit(c(0,8,8,8), "mm"))+
theme(title = element_text(vjust=1))+
theme(legend.title=element_blank())+
theme(axis.text=element_text(colour="black"))
)
print(p1)
p1 <- (ggplot(aes(x = frage, y = ausw,
),
data = erg) +
scale_size_area()+
xlab(NULL)+
#ylab(paste(var_Name_r, "%") )+
geom_line(size=1) +
geom_point() +
geom_text(vjust = -0.5,hjust=-0.1, size=3, color="black") +
ggtitle(paste( station , " - ", year)) +
theme(plot.title=element_text(family="Arial", face="bold", size=10)) +
theme(plot.margin = unit(c(0,8,8,8), "mm"))+
theme(title = element_text(vjust=1))+
theme(legend.title=element_blank())+
theme(axis.text=element_text(colour="black"))
)
print(p1)
p1 <- (ggplot(aes(x = frage, y = ausw,
),
data = erg) +
scale_size_area()+
xlab(NULL)+
#ylab(paste(var_Name_r, "%") )+
geom_line(size=1) +
geom_point() +
geom_text(vjust = -0.5,hjust=-0.1, size=3, color="black") +
ggtitle(paste( station , " - ", year)) +
theme(plot.title=element_text(family="Arial", face="bold", size=10)) +
theme(plot.margin = unit(c(0,8,8,8), "mm"))+
theme(title = element_text(vjust=1))+
theme(legend.title=element_blank())+
theme(axis.text=element_text(colour="black"))
)
erg <- as.data.frame(erg)
p1 <- (ggplot(aes(x = frage, y = ausw,
),
data = erg) +
scale_size_area()+
xlab(NULL)+
#ylab(paste(var_Name_r, "%") )+
geom_line(size=1) +
geom_point() +
geom_text(vjust = -0.5,hjust=-0.1, size=3, color="black") +
ggtitle(paste( station , " - ", year)) +
theme(plot.title=element_text(family="Arial", face="bold", size=10)) +
theme(plot.margin = unit(c(0,8,8,8), "mm"))+
theme(title = element_text(vjust=1))+
theme(legend.title=element_blank())+
theme(axis.text=element_text(colour="black"))
)
print(p1)
p1 <- (ggplot(aes(x = frage, y = ausw,
),
data = erg) +
scale_size_area()+
xlab(NULL)+
#ylab(paste(var_Name_r, "%") )+
geom_line(size=1) +
geom_point() +
geom_text(vjust = -0.5,hjust=-0.1, size=3, color="black") +
# ggtitle(paste( station , " - ", year)) +
theme(plot.title=element_text(family="Arial", face="bold", size=10)) +
theme(plot.margin = unit(c(0,8,8,8), "mm"))+
theme(title = element_text(vjust=1))+
theme(legend.title=element_blank())+
theme(axis.text=element_text(colour="black"))
)
print(p1)
p1 <- (ggplot(aes(x = frage, y = ausw, label = frage
),
data = erg) +
scale_size_area()+
xlab(NULL)+
#ylab(paste(var_Name_r, "%") )+
geom_line(size=1) +
geom_point() +
geom_text(vjust = -0.5,hjust=-0.1, size=3, color="black") +
# ggtitle(paste( station , " - ", year)) +
theme(plot.title=element_text(family="Arial", face="bold", size=10)) +
theme(plot.margin = unit(c(0,8,8,8), "mm"))+
theme(title = element_text(vjust=1))+
theme(legend.title=element_blank())+
theme(axis.text=element_text(colour="black"))
)
print(p1)
dev.off()
p1 <- (ggplot(aes(x = frage, y = ausw, label = frage
),
data = erg) +
scale_size_area()+
xlab(NULL)+
#ylab(paste(var_Name_r, "%") )+
geom_line(size=1) +
geom_point() +
geom_text(vjust = -0.5,hjust=-0.1, size=3, color="black") +
# ggtitle(paste( station , " - ", year)) +
theme(plot.title=element_text(family="Arial", face="bold", size=10)) +
theme(plot.margin = unit(c(0,8,8,8), "mm"))+
theme(title = element_text(vjust=1))+
theme(legend.title=element_blank())+
theme(axis.text=element_text(colour="black"))
)
print(p1)
dev.off()
p1 <- (ggplot(aes(x = frage, y = ausw, label = frage
),
data = erg) +
scale_size_area()+
xlab(NULL)+
#ylab(paste(var_Name_r, "%") )+
geom_line(size=1) +
geom_point() +
# geom_text(vjust = -0.5,hjust=-0.1, size=3, color="black") +
# ggtitle(paste( station , " - ", year)) +
theme(plot.title=element_text(family="Arial", face="bold", size=10)) +
theme(plot.margin = unit(c(0,8,8,8), "mm"))+
theme(title = element_text(vjust=1))+
theme(legend.title=element_blank())+
theme(axis.text=element_text(colour="black"))
)
print(p1)
erg$idu <- row.names(erg)
View(erg)
dev.off()
p1 <- (ggplot(aes(x = idu, y = ausw, label = frage
),
data = erg) +
scale_size_area()+
xlab(NULL)+
#ylab(paste(var_Name_r, "%") )+
geom_line(size=1) +
geom_point() +
# geom_text(vjust = -0.5,hjust=-0.1, size=3, color="black") +
# ggtitle(paste( station , " - ", year)) +
theme(plot.title=element_text(family="Arial", face="bold", size=10)) +
theme(plot.margin = unit(c(0,8,8,8), "mm"))+
theme(title = element_text(vjust=1))+
theme(legend.title=element_blank())+
theme(axis.text=element_text(colour="black"))
)
print(p1)
View(erg)
p1 <- (ggplot(aes(x = idu, y = ausw, label = frage
),
data = erg) +
scale_size_area()+
#xlab(NULL)+
xlab(paste(frage, "%") )+
geom_line(size=1) +
geom_point() +
# geom_text(vjust = -0.5,hjust=-0.1, size=3, color="black") +
# ggtitle(paste( station , " - ", year)) +
theme(plot.title=element_text(family="Arial", face="bold", size=10)) +
theme(plot.margin = unit(c(0,8,8,8), "mm"))+
theme(title = element_text(vjust=1))+
theme(legend.title=element_blank())+
theme(axis.text=element_text(colour="black"))
)
print(p1)
erg
View(erg)
dev.off()
ggplot(aes(x=idu, y = ausw), data = erg) +
geom_bar(stat = 'identity')
View(p1)
View(erg)
dev.off()
df <- structure(list(employee = c("John Doe", "Peter Gynn", "Jolie Hope"),
salary = c(21000L, 23400L, 26800L),
startdate = c("2010-11-01", "2008-03-25", "2007-03-14")),
.Names = c("employee", "salary", "startdate"),
row.names = c(NA, -3L), class = "data.frame")
# if row.names are strings
df$idu <- row.names(df)
# if row numbers are integers (most likely!)
df$idu <- as.numeric(row.names(df))
df
library(ggplot2)
ggplot(aes(x=idu, y = salary), data = df) +
geom_bar(stat = 'identity')
df$idu <- row.names(erg)
# if row numbers are integers (most likely!)
df$idu <- as.numeric(row.names(df))
df
library(ggplot2)
ggplot(aes(x=idu, y = salary), data = df) +
geom_bar(stat = 'identity')
erg
View(erg)
df <- structure(list(employee = c("John Doe", "Peter Gynn", "Jolie Hope"),
salary = c(21000L, 23400L, 26800L),
startdate = c("2010-11-01", "2008-03-25", "2007-03-14")),
.Names = c("employee", "salary", "startdate"),
row.names = c(NA, -3L), class = "data.frame")
View(df)
# if row numbers are integers (most likely!)
df$idu <- as.numeric(row.names(erg))
ggplot(aes(x=idu, y = ausw), data = df) +
geom_bar(stat = 'identity')
ggplot(aes(x=idu, y = ausw), data = erg) +
geom_bar(stat = 'identity')
df <- structure(list(employee = c("John Doe", "Peter Gynn", "Jolie Hope"),
salary = c(21000L, 23400L, 26800L),
startdate = c("2010-11-01", "2008-03-25", "2007-03-14")),
.Names = c("employee", "salary", "startdate"),
row.names = c(NA, -3L), class = "data.frame")
path <- "D:/fragenbogen.csv"
data_ta_200 <- try(read.table(path, skip = 0, header = TRUE, sep=";"),TRUE)
View(data_ta_200)
data_ta_200$id <- as.numeric((row.names(data_ta_200)))
View(data_ta_200)
View(data_ta_200)
ggplot(aes(x=idu, y = Anzahl.der.Auswahlen), data = data_ta_200) +
geom_bar(stat = 'identity')
ggplot(aes(x=id, y = Anzahl.der.Auswahlen), data = data_ta_200) +
geom_bar(stat = 'identity')
View(data_ta_200)
selection_pr <- try(read.table(path, skip = 0, header = TRUE, sep=";"),TRUE)
selection_pr <- cbind(selection_pr$Frage, data_ta_200$Anzahl.der.Auswahlen)
selection_pr
View(selection_pr)
View(selection_pr)
colnames(selection_pr) <- c("Frage","anzahl der Auswahlen")
colnames(selection_pr) <- c("Frage","AnzahlderAuswahlen")
# Filter
filter(selection_pr$AnzahlderAuswahlen == NA)
View(selection_pr)
# Filter
filter(selection_pr$AnzahlderAuswahlen == 'NA')
# setze Spalten-Namen
colnames(selection_pr) <- c("Frage","AnzahlderAuswahlen")
View(selection_pr)
# Filter
filter(selection_pr$AnzahlderAuswahlen == 6)
selection_pr <- try(read.table(path, skip = 0, header = TRUE, sep=";"),TRUE)
# hier wird nur die nötigen Spalten selektiert
selection_pr <- cbind(selection_pr$Frage, data_ta_200$Anzahl.der.Auswahlen)
# hier werden alle ros mit NA gelöscht und bleibt ja nichts :)
#selection_pr <- na.omit(selection_pr)
# setze Spalten-Namen
selection_pr <- colnames(selection_pr) <- c("Frage","AnzahlderAuswahlen")
selection_pr <- try(read.table(path, skip = 0, header = TRUE, sep=";"),TRUE)
# hier wird nur die nötigen Spalten selektiert
selection_pr <- cbind(selection_pr$Frage, data_ta_200$Anzahl.der.Auswahlen)
# hier werden alle ros mit NA gelöscht und bleibt ja nichts :)
#selection_pr <- na.omit(selection_pr)
# setze Spalten-Namen
selection_pr <- colnames(selection_pr) <- c("Frage","AnzahlderAuswahlen")
selection_pr <- try(read.table(path, skip = 0, header = TRUE, sep=";"),TRUE)
# hier wird nur die nötigen Spalten selektiert
selection_pr <- cbind(selection_pr$Frage, data_ta_200$Anzahl.der.Auswahlen)
selection_pr <- try(read.table(path, skip = 0, header = TRUE, sep=";"),TRUE)
# hier wird nur die nötigen Spalten selektiert
selection_pr <- cbind(selection_pr$Frage, selection_pr$Anzahl.der.Auswahlen)
# hier werden alle ros mit NA gelöscht und bleibt ja nichts :)
#selection_pr <- na.omit(selection_pr)
# setze Spalten-Namen
selection_pr <- colnames(selection_pr) <- c("Frage","AnzahlderAuswahlen")
path <- "D:/fragenbogen.csv"
selection_pr <- try(read.table(path, skip = 0, header = TRUE, sep=";"),TRUE)
# hier wird nur die nötigen Spalten selektiert
selection_pr <- cbind(selection_pr$Frage, selection_pr$Anzahl.der.Auswahlen)
selection_pr <- colnames(selection_pr) <- c("Frage","AnzahlderAuswahlen")
selection_pr <- as.table(cbind(selection_pr$Frage, selection_pr$Anzahl.der.Auswahlen))
selection_pr <- try(read.frame(path, skip = 0, header = TRUE, sep=";"),TRUE)
dd <- 10
rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 0) # middle 2 rownames
selection_pr <- try(read.frame(path, skip = 0, header = TRUE, sep=";"),TRUE)
# hier wird nur die nötigen Spalten selektiert
selection_pr <- rbind(selection_pr$Frage, selection_pr$Anzahl.der.Auswahlen)
path <- "D:/fragenbogen.csv"
selection_pr <- try(read.frame(path, skip = 0, header = TRUE, sep=";"),TRUE)
selection_pr <- try(read.table(path, skip = 0, header = TRUE, sep=";"),TRUE)
# hier wird nur die nötigen Spalten selektiert
selection_pr <- rbind(selection_pr$Frage, selection_pr$Anzahl.der.Auswahlen)
View(selection_pr)
selection_pr <- cbind(selection_pr$Frage, selection_pr$Anzahl.der.Auswahlen)
selection_pr <- try(read.table(path, skip = 0, header = TRUE, sep=";"),TRUE)
# hier wird nur die nötigen  selektiert
selection_pr <- cbind(selection_pr$Frage, selection_pr$Anzahl.der.Auswahlen)
View(selection_pr)
selection_pr <- colnames(selection_pr) <- c("Frage","AnzahlderAuswahlen")
selection_pr <- cbind(selection_pr$Frage, selection_pr$Anzahl.der.Auswahlen)
selection_pr <- try(read.table(path, skip = 0, header = TRUE, sep=";"),TRUE)
# hier wird nur die nötigen  selektiert
selection_pr <- cbind(selection_pr$Frage, selection_pr$Anzahl.der.Auswahlen)
selection_pr <- try(read.table(path, skip = 0, header = TRUE, sep=";"),TRUE)
# hier wird nur die nötigen  selektiert
selection_pr_a <- cbind(selection_pr$Frage, selection_pr$Anzahl.der.Auswahlen)
selection_pr_a <- merge(selection_pr$Frage, selection_pr$Anzahl.der.Auswahlen)
View(selection_pr_a)
View(selection_pr)
selection_pr <- try(read.table(path, skip = 0, header = TRUE, sep=";"),TRUE)
# hier wird nur die nötigen  selektiert
selection_pr_a <- merge(selection_pr$Frage, selection_pr$Anzahl.der.Auswahlen, by="Frage")
View(selection_pr)
selection_pr_a <- merge(selection_pr$Frage, selection_pr$Anzahl.der.Auswahlen, by="Häufigste.Auswahl")
selection_pr_a <- merge(selection_pr$Frage, selection_pr$Anzahl.der.Auswahlen, by="Anzahl.der.Auswahlen")
selection_pr_a <- cbind2(selection_pr$Frage, selection_pr$Anzahl.der.Auswahlen)
View(selection_pr_a)
selection_pr <- try(as.data.frame(read.table(path, skip = 0, header = TRUE, sep=";"),TRUE))
selection_pr_a <- cbind2(selection_pr$Frage, selection_pr$Anzahl.der.Auswahlen)
View(selection_pr_a)
path <- "D:/fragenbogen.csv"
selection_pr <- try(as.data.frame(read.table(path, skip = 0, header = TRUE, sep=";"),TRUE))
selection_pr <- try(data.frame(read.table(path, skip = 0, header = TRUE, sep=";"),TRUE))
# hier wird nur die nötigen  selektiert
selection_pr_a <- cbind2(selection_pr$Frage, selection_pr$Anzahl.der.Auswahlen)
# setze Spalten-Namen
selection_pr_a <- colnames(selection_pr) <- c("Frage","AnzahlderAuswahlen")
selection_pr <- try(data.frame(read.table(path, skip = 0, header = TRUE, sep=";"),TRUE))
# Filter
filter(selection_pr$AnzahlderAuswahlen == 6)
selection_pr <- try(data.frame(read.table(path, skip = 0, header = TRUE, sep=";"),TRUE))
selection_pr_a <- filter(selection_pr$Anzahl.der.Auswahlen == 6)
filter(selection_pr$Anzahl.der.Auswahlen == 6)
# Filter
filter(selection_pr, selection_pr$Anzahl.der.Auswahlen == 6)
selection_pr$Anzahl.der.Auswahlen
filter(selection_pr, selection_pr$Anzahl.der.Auswahlen == '6')
selection_pr
filter(selection_pr, selection_pr$Fragetyp == 'Matrix')
# Filter
filter(selection_pr, selection_pr$Fragetyp != 'Matrix')
View(selection_pr)
# Filter
selection_pr_a<-filter(selection_pr, selection_pr$Fragetyp != 'Matrix')
# Filter
filter(selection_pr, selection_pr$Fragetyp != 'Matrix')
View(selection_pr)
# Filter
filter(selection_pr, selection_pr$Fragetyp != 'Matrixfrage')
View(selection_pr)
# Filter
selection_pr_a <-filter(selection_pr, selection_pr$Fragetyp != 'Matrixfrage')
filter(selection_pr, selection_pr$Fragetyp=='Matrixfrage')
# Filter
selection_pr_a <-filter(selection_pr, selection_pr$Fragetyp=='Matrixfrage')
selection_pr <- try(data.frame(read.table(path, skip = 0, header = TRUE, sep=";"),TRUE))
# Filter
selection_pr_a <-filter(selection_pr, Fragetyp=='Matrixfrage')
selection_pr <- try(read.table(path, skip = 0, header = TRUE, sep=";"),TRUE)
# Filter
selection_pr_a <-filter(selection_pr, Fragetyp=='Matrixfrage')
selection_pr <- try(read.table(path, skip = 0, header = TRUE, sep=";"),TRUE)
# Filter
selection_pr_a <-filter(selection_pr, selection_pr$Fragetyp=='Matrixfrage')
selection_pr_a
selection_pr_a <-filter(selection_pr, selection_pr$Fragetyp!'Matrixfrage')
selection_pr_a <-filter(selection_pr, selection_pr$Fragetyp!='Matrixfrage')
selection_pr_a
View(selection_pr)
# Filter
selection_pr <- table(selection_pr[selection_pr$Fragetyp = "Matrixfrage",])
# Filter
selection_pr <- table(selection_pr[selection_pr$Fragetyp != "Matrixfrage",])
selection_pr
selection_pr <- selection_pr[selection_pr$Fragetyp != "Matrixfrage",]
selection_pr <- selection_pr$Fragetyp != "Matrixfrage"
selection_pr <- try(read.table(path, skip = 0, header = TRUE, sep=";"),TRUE)
selection_pr <- try(read.table(path, skip = 0, header = TRUE, sep=";"),TRUE)
path <- "D:/fragenbogen.csv"
selection_pr <- try(read.table(path, skip = 0, header = TRUE, sep=";"),TRUE)
selection_pr <- selection_pr$Fragetyp != "Matrixfrage"
selection_pr
selection_pr <- try(read.table(path, skip = 0, header = TRUE, sep=";"),TRUE)
selection_pr_l <- selection_pr[selection_pr$Fragetyp != "Matrixfrage"]
View(selection_pr)
selection_pr_l <- selection_pr[selection_pr$Fragetyp!= "Matrixfrage",]
View(selection_pr_l)
reticulate::repl_python()
import pytest
import pytest
def m(x):
return 2 * x
def test_function_2():
assert m(2) == 4
@pytest.mark.parametrize("test_input,expected", [(4, 8), (16, 32), (64, 128)])
def test_function_x(test_input, expected):
assert m(test_input) == expected
def d(x):
return 2 / x
def test_function_by_zero():
# tell Pytest to expect a ZeroDivisionError:
with pytest.raises(ZeroDivisionError):
d(0)
def test_wrong():
assert m(2) ==2
def test_wrong_by_zero():
with pytest.raises(ZeroDivisionError):
d(2)
from hypothesis import given, settings, strategies as st
@settings(max_examples=1000)
@given(st.integers(min_value=0,max_value=1000))
def test_function_even(x):
assert m(x) % 2 == 0,  "result was odd, should be even"
reticulate::repl_python()
import pytest
import pytest
fils <- list.files("D:/distribution_digitizer/data/output/", pattern=patternSum, full.names = TRUE, recursive = FALSE)
#f<- list.files(findTemplateResult, pattern=patternSum, full.names = TRUE, recursive = FALSE)
c = paste0(length(fils ),"")
print(c)
fils <- list.files("D:/distribution_digitizer/data/output/", pattern=patternSum, full.names = TRUE, recursive = FALSE)
#f<- list.files(findTemplateResult, pattern=patternSum, full.names = TRUE, recursive = FALSE)
c = paste0(length(fils),"")
print(length(fils))
fils <- list.files("D:/distribution_digitizer/data/output/", pattern=patternSum, full.names = TRUE, recursive = FALSE)
patternSum = paste0("0.9")
fils <- list.files("D:/distribution_digitizer/data/output/", pattern=patternSum, full.names = TRUE, recursive = FALSE)
print(length(fils))
runApp('app.R') # the app itself
library(reticulate) # Python binding for R. If the package is not installed, execute
# install.packages("reticulate") # and hit Y when prompted for the miniconda installation
use_python(Sys.which("python")) # Set the path to a local python installation.
#use_python("C:/Program Files (x86)/Python27/python.exe")
os <- import("os") # python module needed for managing files, folders and their paths
#py_install(packages = "opencv-python", pip = TRUE)
#py_install(packages = "pillow", pip = FALSE)
#py_install(packages = "pandas", pip = FALSE)
#py_install(packages = "GDAL", pip = FALSE)
# Set the path to app.R for being able to execute the shiny app (runApp('app.R'))
# By default, this app.R lies at the root of this repository.
# In RStudio, this path can be set automatically with
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# or manually with a path of your choice:
setwd("D:/distribution_digitizer_students/") # uncomment this line for setting the working directory manually.
getwd() # print the path to the working directory for copying into the Digitizer application (Field: "Working Directory").
library(shiny) # shiny library necessary for starting the app
runApp('app.R') # the app itself
