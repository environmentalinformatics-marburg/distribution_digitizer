gdal.Warp(dst_path, src_ds, dstSRS=target_projection, dstnodata0)
gdal.Warp(dst_path, src_ds, dstSRS=target_projection, dstnodata[0])
library(terra)
library(caret)
library(CAST)
library(mapview)
library(RColorBrewer)
library(raster)
library(latticeExtra)
#load in predictors
predictors <- raster::stack("D:/MSc_Phys_Geo/upscaling_project/data/area_level/predictors.tif")
#load in predictors
predictors <- raster::stack("D:/MSc_Phys_Geo/upscaling_project/data/area_level/predictors.tif")
predictors
# rename layers that they match with the variable names of the models
names(predictors)[names(predictors) == "elevation"] <- "mean_dtm"
names(predictors)[names(predictors) == "aspect"] <- "mean_aspect"
names(predictors)[names(predictors) == "slope"] <- "mean_slope"
names(predictors)[names(predictors) == "NDVI"] <- "NDVI_mean"
names(predictors)[names(predictors) == "SAVI"] <- "SAVI_mean"
# read models
INDEX_ffs_rmse <- readRDS("D:/MSc_Phys_Geo/upscaling_project/data/modeling/models/INDEX_ffs_rmse.RDS")
INDEX_ffs_rsq <- readRDS("D:/MSc_Phys_Geo/upscaling_project/data/modeling/models/INDEX_ffs_rsq.RDS")
INDEX_rfe_rmse <- readRDS("D:/MSc_Phys_Geo/upscaling_project/data/modeling/models/INDEX_rfe_rmse.RDS")
INDEX_rfe_rsq <- readRDS("D:/MSc_Phys_Geo/upscaling_project/data/modeling/models/INDEX_rfe_rsq.RDS")
# predict
prediction_INDEX_ffs_rmse <- raster::predict(predictors, INDEX_ffs_rmse, na.rm=T)
# plot the results
#mapview::mapview(prediction_INDEX_ffs_rmse,col.regions=brewer.pal(9, "YlGn"))
plot(prediction_INDEX_ffs_rmse)
prediction_INDEX_ffs_rsq <- raster::predict(predictors, INDEX_ffs_rsq, na.rm=T)
plot(prediction_INDEX_ffs_rsq)
prediction_INDEX_rfe_rmse <- raster::predict(predictors, INDEX_rfe_rmse, na.rm=T)
plot(prediction_INDEX_rfe_rmse)
prediction_INDEX_rfe_rsq <- raster::predict(predictors, INDEX_rfe_rsq, na.rm=T)
predictors
names(predictors)[names(predictors) == "mean_avg_temp"] <- "average_temp"
prediction_INDEX_rfe_rsq <- raster::predict(predictors, INDEX_rfe_rsq, na.rm=T)
plot(prediction_INDEX_rfe_rsq)
# write out prediction rasters
writeRaster(prediction_INDEX_ffs_rmse, "D:/MSc_Phys_Geo/upscaling_project/data/modeling/pred_rasters/pred_INDEX_ffs_rmse.tif")
writeRaster(prediction_INDEX_ffs_rsq, "D:/MSc_Phys_Geo/upscaling_project/data/modeling/pred_rasters/pred_INDEX_ffs_rsq.tif")
writeRaster(prediction_INDEX_rfe_rmse, "D:/MSc_Phys_Geo/upscaling_project/data/modeling/pred_rasters/pred_INDEX_rfe_rmse.tif")
writeRaster(prediction_INDEX_rfe_rsq, "D:/MSc_Phys_Geo/upscaling_project/data/modeling/pred_rasters/pred_INDEX_rfe_rsq.tif")
# read models
SRPLANTS_ffs_rmse <- readRDS("D:/MSc_Phys_Geo/upscaling_project/data/modeling/models/SRPLANTS_ffs_rmse.RDS")
SRPLANTS_ffs_rsq <- readRDS("D:/MSc_Phys_Geo/upscaling_project/data/modeling/models/SRPLANTS_ffs_rsq.RDS")
SRPLANTS_rfe_rmse <- readRDS("D:/MSc_Phys_Geo/upscaling_project/data/modeling/models/SRPLANTS_rfe_rmse.RDS")
SRPLANTS_rfe_rsq <- readRDS("D:/MSc_Phys_Geo/upscaling_project/data/modeling/models/SRPLANTS_rfe_rsq.RDS")
# predict
prediction_SRPLANTS_ffs_rmse <- raster::predict(predictors, SRPLANTS_ffs_rmse, na.rm=T)
SRPLANTS_ffs_rmse
prediction_SRPLANTS_ffs_rmse <- raster::predict(predictors, SRPLANTS_ffs_rmse, na.rm=T)
# load in predictors
predictors <- raster::stack("D:/MSc_Phys_Geo/upscaling_project/data/area_level/predictors.tif")
names(predictors)[names(predictors) == "elevation"] <- "mean_dtm"
names(predictors)[names(predictors) == "aspect"] <- "mean_aspect"
names(predictors)[names(predictors) == "slope"] <- "mean_slope"
names(predictors)[names(predictors) == "NDVI"] <- "NDVI_mean"
names(predictors)[names(predictors) == "SAVI"] <- "SAVI_mean"
names(predictors)[names(predictors) == "mean_avg_temp"] <- "average_temp"
# predict
prediction_SRPLANTS_ffs_rmse <- raster::predict(predictors, SRPLANTS_ffs_rmse, na.rm=T)
# plot the results
#mapview::mapview(prediction_INDEX_ffs_rmse,col.regions=brewer.pal(9, "YlGn"))
plot(prediction_SRPLANTS_ffs_rmse)
prediction_SRPLANTS_ffs_rsq <- raster::predict(predictors, SRPLANTS_ffs_rsq, na.rm=T)
plot(prediction_SRPLANTS_ffs_rsq)
prediction_SRPLANTS_rfe_rmse <- raster::predict(predictors, SRPLANTS_rfe_rmse, na.rm=T)
plot(prediction_SRPLANTS_rfe_rmse)
prediction_SRPLANTS_rfe_rsq <- raster::predict(predictors, SRPLANTS_rfe_rsq, na.rm=T)
plot(prediction_SRPLANTS_rfe_rsq)
# write out prediction rasters
writeRaster(prediction_SRPLANTS_ffs_rmse, "D:/MSc_Phys_Geo/upscaling_project/data/modeling/pred_rasters/pred_SRPLANTS_ffs_rmse.tif")
writeRaster(prediction_SRPLANTS_ffs_rsq, "D:/MSc_Phys_Geo/upscaling_project/data/modeling/pred_rasters/pred_SRPLANTS_ffs_rsq.tif")
writeRaster(prediction_SRPLANTS_rfe_rmse, "D:/MSc_Phys_Geo/upscaling_project/data/modeling/pred_rasters/pred_SRPLANTS_rfe_rmse.tif")
predictors <- raster::stack("D:/MSc_Phys_Geo/upscaling_project/data/area_level/predictors.tif")
#mapview::mapview(predictors,col.regions=brewer.pal(9, "YlGn"))
# rename layers that they match with the variable names of the models
names(predictors)[names(predictors) == "elevation"] <- "mean_dtm"
names(predictors)[names(predictors) == "aspect"] <- "mean_aspect"
names(predictors)[names(predictors) == "slope"] <- "mean_slope"
names(predictors)[names(predictors) == "NDVI"] <- "NDVI_mean"
names(predictors)[names(predictors) == "SAVI"] <- "SAVI_mean"
names(predictors)[names(predictors) == "mean_avg_temp"] <- "average_temp"
SRPOLL_ffs_rmse <- readRDS("D:/MSc_Phys_Geo/upscaling_project/data/modeling/models/SRPOLL_ffs_rmse.RDS")
SRPOLL_ffs_rsq <- readRDS("D:/MSc_Phys_Geo/upscaling_project/data/modeling/models/SRPOLL_ffs_rsq.RDS")
SRPOLL_rfe_rmse <- readRDS("D:/MSc_Phys_Geo/upscaling_project/data/modeling/models/SRPOLL_rfe_rmse.RDS")
SRPOLL_rfe_rsq <- readRDS("D:/MSc_Phys_Geo/upscaling_project/data/modeling/models/SRPOLL_rfe_rsq.RDS")
# predict
prediction_SRPOLL_ffs_rmse <- raster::predict(predictors, SRPOLL_ffs_rmse, na.rm=T)
prediction_SRPOLL_ffs_rsq <- raster::predict(predictors, SRPOLL_ffs_rsq, na.rm=T)
prediction_SRPOLL_ffs_rsq <- raster::predict(predictors, SRPOLL_ffs_rsq, na.rm=T)
prediction_SRPOLL_rfe_rmse <- raster::predict(predictors, SRPOLL_rfe_rmse, na.rm=T)
prediction_SRPOLL_rfe_rsq <- raster::predict(predictors, SRPOLL_rfe_rsq, na.rm=T)
SRPOLL_rfe_rsq
varImp(SRPOLL_rfe_rsq)
# plot the results
#mapview::mapview(prediction_INDEX_ffs_rmse,col.regions=brewer.pal(9, "YlGn"))
plot(prediction_SRPOLL_ffs_rmse)
plot(prediction_SRPOLL_ffs_rsq)
plot(prediction_SRPOLL_rfe_rmse)
library(caret)
library(CAST)
library(randomForest)
## Prepare the data
# read model data
model_data <- read.csv("D:/MSc_Phys_Geo/upscaling_project/data/plot_level/combined/pred_SRpoll.csv")
model_data
# omit first column (just index values and SD of NDVI and SAVI)
model_data = model_data[,-1]
colnames(model_data)
# omit NA values
model_data = na.omit(model_data)
# create vector containing predictors
predictors <- c("mean_min_temp", "mean_max_temp", "average_temp", "prec_total",
"mean_dtm", "mean_aspect", "mean_slope", "NDVI_mean", "SAVI_mean")
# Initialize variables
target <- "SRpoll"
set.seed(10)
trainIndex <- caret::createDataPartition(model_data$SRpoll, p = .75,
list = FALSE,
times = 1)
# use the index values to split the data into training and testing data
featuresTrain <- model_data[ trainIndex,]
featuresTest  <- model_data[-trainIndex,]
# Create spacetime folds
set.seed(42)
indices <- CreateSpacetimeFolds(featuresTrain, spacevar = "cat", k = 9)
# Set mtry and tunegrid
set.seed(42)
mtry <- seq(1:10)
tunegrid <- expand.grid(mtry = mtry)
# Initialize variables
target <- "SRpoll"
# train a model with that input:
rfemodel_RSq <- train(as.formula(paste(target, "~ .")),
data = featuresTrain[, c(target, "mean_dtm", "mean_max_temp", "mean_min_temp", "average_temp")],
method = "rf",
tuneGrid = tunegrid,
verbose = FALSE,
trControl = trainControl(method = "cv", index = indices$index))
# Test the final model
featuresTest$pred_rfe_rsq <- predict(rfemodel_RSq, newdata = featuresTest)
# Evaluate the model using RMSE
rfe_rsq <- postResample(pred = featuresTest$pred_rfe_rsq, obs = featuresTest$SRpoll)
rfe_rsq
# Write the model out
saveRDS(rfemodel_RSq, "D:/MSc_Phys_Geo/upscaling_project/data/modeling/models/SRPOLL_rfe_rsq.RDS")
# write stats from Cross validation out
write.csv(rfemodel_RSq$results, "D:/MSc_Phys_Geo/upscaling_project/data/modeling/stats/SRPOLL_rfe_rsq_CV.csv")
SRPOLL_rfe_rsq <- readRDS("D:/MSc_Phys_Geo/upscaling_project/data/modeling/models/SRPOLL_rfe_rsq.RDS")
varImp(SRPOLL_rfe_rsq)
prediction_SRPOLL_rfe_rsq <- raster::predict(predictors, SRPOLL_rfe_rsq, na.rm=T)
SRPOLL_rfe_rsq
# load in predictors
predictors <- raster::stack("D:/MSc_Phys_Geo/upscaling_project/data/area_level/predictors.tif")
# rename layers that they match with the variable names of the models
names(predictors)[names(predictors) == "elevation"] <- "mean_dtm"
names(predictors)[names(predictors) == "aspect"] <- "mean_aspect"
names(predictors)[names(predictors) == "slope"] <- "mean_slope"
names(predictors)[names(predictors) == "NDVI"] <- "NDVI_mean"
names(predictors)[names(predictors) == "SAVI"] <- "SAVI_mean"
names(predictors)[names(predictors) == "mean_avg_temp"] <- "average_temp"
prediction_SRPOLL_rfe_rsq <- raster::predict(predictors, SRPOLL_rfe_rsq, na.rm=T)
plot(prediction_SRPOLL_rfe_rsq)
# write out prediction rasters
writeRaster(prediction_SRPOLL_ffs_rmse, "D:/MSc_Phys_Geo/upscaling_project/data/modeling/pred_rasters/pred_SRPOLL_ffs_rmse.tif")
writeRaster(prediction_SRPOLL_ffs_rsq, "D:/MSc_Phys_Geo/upscaling_project/data/modeling/pred_rasters/pred_SRPOLL_ffs_rsq.tif")
writeRaster(prediction_SRPOLL_rfe_rmse, "D:/MSc_Phys_Geo/upscaling_project/data/modeling/pred_rasters/pred_SRPOLL_rfe_rmse.tif")
writeRaster(prediction_SRPOLL_rfe_rsq, "D:/MSc_Phys_Geo/upscaling_project/data/modeling/pred_rasters/pred_SRPOLL_rfe_rsq.tif")
SRPLANTS_rfe_rsq <- readRDS("D:/MSc_Phys_Geo/upscaling_project/data/modeling/models/SRPLANTS_rfe_rsq.RDS")
prediction_SRPLANTS_rfe_rsq <- raster::predict(predictors, SRPLANTS_rfe_rsq, na.rm=T)
plot(prediction_SRPLANTS_rfe_rsq)
writeRaster(prediction_SRPLANTS_rfe_rsq, "D:/MSc_Phys_Geo/upscaling_project/data/modeling/pred_rasters/pred_SRPLANTS_rfe_rsq.tif")
# read models
INDEX_ffs_rmse <- readRDS("D:/MSc_Phys_Geo/upscaling_project/data/modeling/models/INDEX_ffs_rmse.RDS")
INDEX_ffs_rsq <- readRDS("D:/MSc_Phys_Geo/upscaling_project/data/modeling/models/INDEX_ffs_rsq.RDS")
INDEX_rfe_rmse <- readRDS("D:/MSc_Phys_Geo/upscaling_project/data/modeling/models/INDEX_rfe_rmse.RDS")
INDEX_rfe_rsq <- readRDS("D:/MSc_Phys_Geo/upscaling_project/data/modeling/models/INDEX_rfe_rsq.RDS")
# read models
SRPLANTS_ffs_rmse <- readRDS("D:/MSc_Phys_Geo/upscaling_project/data/modeling/models/SRPLANTS_ffs_rmse.RDS")
SRPLANTS_ffs_rsq <- readRDS("D:/MSc_Phys_Geo/upscaling_project/data/modeling/models/SRPLANTS_ffs_rsq.RDS")
SRPLANTS_rfe_rmse <- readRDS("D:/MSc_Phys_Geo/upscaling_project/data/modeling/models/SRPLANTS_rfe_rmse.RDS")
SRPLANTS_rfe_rsq <- readRDS("D:/MSc_Phys_Geo/upscaling_project/data/modeling/models/SRPLANTS_rfe_rsq.RDS")
# read models
SRPOLL_ffs_rmse <- readRDS("D:/MSc_Phys_Geo/upscaling_project/data/modeling/models/SRPOLL_ffs_rmse.RDS")
SRPOLL_ffs_rsq <- readRDS("D:/MSc_Phys_Geo/upscaling_project/data/modeling/models/SRPOLL_ffs_rsq.RDS")
SRPOLL_rfe_rmse <- readRDS("D:/MSc_Phys_Geo/upscaling_project/data/modeling/models/SRPOLL_rfe_rmse.RDS")
SRPOLL_rfe_rsq <- readRDS("D:/MSc_Phys_Geo/upscaling_project/data/modeling/models/SRPOLL_rfe_rsq.RDS")
# load libraries
library(doParallel)
library(parallel)
cl <- makeCluster(4)
registerDoParallel(cl)
# load in predictors
predictors <- raster::stack("D:/MSc_Phys_Geo/upscaling_project/data/area_level/predictors.tif")
names(predictors)[names(predictors) == "elevation"] <- "mean_dtm"
names(predictors)[names(predictors) == "aspect"] <- "mean_aspect"
names(predictors)[names(predictors) == "slope"] <- "mean_slope"
names(predictors)[names(predictors) == "NDVI"] <- "NDVI_mean"
names(predictors)[names(predictors) == "SAVI"] <- "SAVI_mean"
names(predictors)[names(predictors) == "mean_avg_temp"] <- "average_temp"
INDEX_ffs_rmse_AOA <- aoa(predictors,INDEX_ffs_rmse) # will take some time
# calculate AOAs
AOA_INDEX_ffs_rmse <- aoa(predictors,INDEX_ffs_rmse)
plot(AOA_INDEX_ffs_rmse$DI)
plot(AOA_INDEX_ffs_rmse$AOA)
# write out
writeRaster(AOA_INDEX_ffs_rmse,"D:/MSc_Phys_Geo/upscaling_project/data/modeling/pred_rasters/aoa/aoa_INDEX_ffs_rmse.tif")
AOA_INDEX_ffs_rmse
class(AOA_INDEX_ffs_rmse)
AOA_INDEX_ffs_rmse$parameters
class(AOA_INDEX_ffs_rmse$parameters)
AOA_INDEX_ffs_rmse_stack = raster::stack(AOA_INDEX_ffs_rmse$DI, AOA_INDEX_ffs_rmse$AOA)
writeRaster(AOA_INDEX_ffs_rmse_stack,"D:/MSc_Phys_Geo/upscaling_project/data/modeling/pred_rasters/aoa/aoa_INDEX_ffs_rmse.tif")
AOA_INDEX_ffs_rmse_stack
writeRaster(AOA_INDEX_ffs_rmse$DI,"D:/MSc_Phys_Geo/upscaling_project/data/modeling/pred_rasters/aoa/INDEX_ffs_rmse_DI.tif")
writeRaster(AOA_INDEX_ffs_rmse$AOA,"D:/MSc_Phys_Geo/upscaling_project/data/modeling/pred_rasters/aoa/INDEX_ffs_rmse_AOA.tif")
a = AOA_INDEX_ffs_rmse$parameters
a
write.csv(AOA_INDEX_ffs_rmse$parameters, "D:/MSc_Phys_Geo/upscaling_project/data/modeling/pred_rasters/aoa/INDEX_ffs_rmse_AOAparam.csv")
rm(list=ls())
gc()
# load libraries
library(terra)
library(caret)
library(CAST)
library(mapview)
library(RColorBrewer)
library(raster)
library(latticeExtra)
# load libraries
library(doParallel)
library(parallel)
cl <- makeCluster(4)
registerDoParallel(cl)
##########################################################
# Function to calculate AOA for a given model
calculate_AOA <- function(model_file) {
model_name <- gsub("\\.RDS", "", basename(model_file))
model <- readRDS(model_file)
AOA <- aoa(predictors, model)
writeRaster(AOA$DI, paste0("D:/MSc_Phys_Geo/upscaling_project/data/modeling/pred_rasters/aoa/", model_name, "_DI.tif"))
writeRaster(AOA$AOA, paste0("D:/MSc_Phys_Geo/upscaling_project/data/modeling/pred_rasters/aoa/", model_name, "_AOA.tif"))
rm(AOA)
rm(model)
}
# Get a list of all RDS files in the folder
model_files <- list.files("D:/MSc_Phys_Geo/upscaling_project/data/modeling/models", pattern = "\\.RDS$", full.names = TRUE)
model_files
# load in predictors
predictors <- raster::stack("D:/MSc_Phys_Geo/upscaling_project/data/area_level/predictors.tif")
#mapview::mapview(predictors,col.regions=brewer.pal(9, "YlGn"))
# rename layers that they match with the variable names of the models
names(predictors)[names(predictors) == "elevation"] <- "mean_dtm"
names(predictors)[names(predictors) == "aspect"] <- "mean_aspect"
names(predictors)[names(predictors) == "slope"] <- "mean_slope"
names(predictors)[names(predictors) == "NDVI"] <- "NDVI_mean"
names(predictors)[names(predictors) == "SAVI"] <- "SAVI_mean"
names(predictors)[names(predictors) == "mean_avg_temp"] <- "average_temp"
predictors
l
# Get a list of all RDS files in the folder
model_files <- list.files("D:/MSc_Phys_Geo/upscaling_project/data/modeling/models", pattern = "\\.RDS$", full.names = TRUE)
model_files
# Loop through each model and calculate AOA
for (model_file in model_files) {
calculate_AOA(model_file)
}
# load libraries
library(terra)
library(caret)
library(CAST)
library(mapview)
library(RColorBrewer)
library(raster)
library(latticeExtra)
# load libraries
library(doParallel)
library(parallel)
cl <- makeCluster(4)
registerDoParallel(cl)
# load in predictors
predictors <- raster::stack("D:/MSc_Phys_Geo/upscaling_project/data/area_level/predictors.tif")
# rename layers that they match with the variable names of the models
names(predictors)[names(predictors) == "elevation"] <- "mean_dtm"
names(predictors)[names(predictors) == "aspect"] <- "mean_aspect"
names(predictors)[names(predictors) == "slope"] <- "mean_slope"
names(predictors)[names(predictors) == "NDVI"] <- "NDVI_mean"
names(predictors)[names(predictors) == "SAVI"] <- "SAVI_mean"
names(predictors)[names(predictors) == "mean_avg_temp"] <- "average_temp"
# Function to calculate AOA for a given model and write out the AOA properties (AOA, DI)
calculate_AOA <- function(model_file) {
model_name <- gsub("\\.RDS", "", basename(model_file))
model <- readRDS(model_file)
AOA <- aoa(predictors, model)
writeRaster(AOA$DI, paste0("D:/MSc_Phys_Geo/upscaling_project/data/modeling/pred_rasters/aoa/", model_name, "_DI.tif"), overwrite=TRUE)
writeRaster(AOA$AOA, paste0("D:/MSc_Phys_Geo/upscaling_project/data/modeling/pred_rasters/aoa/", model_name, "_AOA.tif"), overwrite=TRUE)
rm(AOA)
rm(model)
}
# list all RDS files
model_files <- list.files("D:/MSc_Phys_Geo/upscaling_project/data/modeling/models", pattern = "\\.RDS$", full.names = TRUE)
# loop over each model to calculate and write out AOA
for (model_file in model_files) {
calculate_AOA(model_file)
}
model_files
INDEX_rfe_rmse <- readRDS("D:/MSc_Phys_Geo/upscaling_project/data/modeling/models/INDEX_rfe_rmse.RDS")
# calculate AOAs
AOA_INDEX_rfe_rmse <- aoa(predictors,INDEX_rfe_rmse)
INDEX_rfe_rmse
varImp(INDEX_rfe_rmse)
model_files
model_files = model_files[4:12]
model_files
# loop over each model to calculate and write out AOA
for (model_file in model_files) {
calculate_AOA(model_file)
}
# list all RDS files
model_files <- list.files("D:/MSc_Phys_Geo/upscaling_project/data/modeling/models", pattern = "\\.RDS$", full.names = TRUE)
model_files = model_files[10:12]
model_files
# loop over each model to calculate and write out AOA
for (model_file in model_files) {
calculate_AOA(model_file)
}
data <- read.table("D:/MSc_Phys_Geo/upscaling_project/data/Classen_Steffan-Dewenter_2020.tab",
sep = "\t",
skip = 74,
header = TRUE)
View(data)
unique(data$Date.Time)
data
# take a look
colnames(data)
index_ffs_rmse_cv = read.csv("D:/MSc_Phys_Geo/upscaling_project/data/modeling/stats/INDEX_ffs_rmse_CV.csv")
index_ffs_rmse_cv
index_ffs_rsq_cv = read.csv("D:/MSc_Phys_Geo/upscaling_project/data/modeling/stats/INDEX_ffs_rsq_CV.csv")
index_rfe_rmse_cv = read.csv("D:/MSc_Phys_Geo/upscaling_project/data/modeling/stats/INDEX_rfe_rmse_CV.csv")
index_rfe_rsq_cv = read.csv("D:/MSc_Phys_Geo/upscaling_project/data/modeling/stats/INDEX_rfe_rsq_CV.csv")
# SR Plants
plants_ffs_rmse_cv = read.csv("D:/MSc_Phys_Geo/upscaling_project/data/modeling/stats/SRPLANTS_ffs_rmse_CV.csv")
plants_ffs_rsq_cv = read.csv("D:/MSc_Phys_Geo/upscaling_project/data/modeling/stats/SRPLANTS_ffs_rsq_CV.csv")
plants_rfe_rmse_cv = read.csv("D:/MSc_Phys_Geo/upscaling_project/data/modeling/stats/SRPLANTS_rfe_rmse_CV.csv")
plants_rfe_rsq_cv = read.csv("D:/MSc_Phys_Geo/upscaling_project/data/modeling/stats/SRPLANTS_rfe_rsq_CV.csv")
# SR Poll
poll_ffs_rmse_cv = read.csv("D:/MSc_Phys_Geo/upscaling_project/data/modeling/stats/SRPOLL_ffs_rmse_CV.csv")
poll_ffs_rsq_cv = read.csv("D:/MSc_Phys_Geo/upscaling_project/data/modeling/stats/SRPOLL_ffs_rsq_CV.csv")
poll_rfe_rmse_cv = read.csv("D:/MSc_Phys_Geo/upscaling_project/data/modeling/stats/SRPOLL_rfe_rmse_CV.csv")
poll_rfe_rsq_cv = read.csv("D:/MSc_Phys_Geo/upscaling_project/data/modeling/stats/SRPOLL_rfe_rsq_CV.csv")
index_results_testing = read.csv("D:/MSc_Phys_Geo/upscaling_project/data/modeling/stats/INDEX_results_testing.csv")
index_pred_testing = read.csv("D:/MSc_Phys_Geo/upscaling_project/data/modeling/stats/INDEX_predictions_testing.csv")
plants_pred_testing = read.csv("D:/MSc_Phys_Geo/upscaling_project/data/modeling/stats/SRPLANTS_predictions_testing.csv")
plants_results_testing = read.csv("D:/MSc_Phys_Geo/upscaling_project/data/modeling/stats/SRPLANTS_results_testing.csv")
poll_pred_testing = read.csv("D:/MSc_Phys_Geo/upscaling_project/data/modeling/stats/SRPOLL_predictions_testing.csv")
poll_results_testing = read.csv("D:/MSc_Phys_Geo/upscaling_project/data/modeling/stats/SRPOLL_results_testing.csv")
index_pred_testing
index_ffs_rmse_cv
index_results_testing
index_pred_testing
index_ffs_rmse_cv
index_ffs_rsq_cv
index_rfe_rmse_cv
index_rfe_rsq_cv
index_results_testing
index_pred_testing
plants_ffs_rmse_cv
plants_ffs_rsq_cv
plants_rfe_rmse_cv
plants_rfe_rsq_cv
plants_pred_testing
poll_ffs_rmse_cv
poll_data = read.csv("D:/MSc_Phys_Geo/upscaling_project/data/plot_level/combined/pred_SRpoll.csv")
poll_data
poll_ffs_rmse_cv
poll_ffs_rsq_cv
poll_rfe_rmse_cv
poll_rfe_rsq_cv
poll_pred_testing
poll_results_testing
poll_data
pred_index = read.csv("D:/MSc_Phys_Geo/upscaling_project/data/plot_level/combined/pred_Index.csv")
pred_index
index = read.csv("D:/MSc_Phys_Geo/upscaling_project/data/plot_level/combined/pred_Index.csv")
srplants = read.csv("D:/MSc_Phys_Geo/upscaling_project/data/plot_level/combined/pred_SRplants.csv")
srpoll = read.csv("D:/MSc_Phys_Geo/upscaling_project/data/plot_level/combined/pred_SRpoll.csv")
plot(index$Index ~ srplants$SRplants)
plot(srplants$SRplants ~ srpoll$SRpoll)
plot(srpoll$SRpoll ~ index$Index)
hist(index$Index, main = "Histogram of Index")
hist(srplants$SRplants, main = "Histogram of SRplants")
# Perform Shapiro-Wilk test on Index
shapiro.test(index$Index)
# Perform Shapiro-Wilk test on SRplants
shapiro.test(srplants$SRplants)
hist(srpoll$SRpoll, main = "Histogram of SRpoll")
# Perform Shapiro-Wilk test on SRpoll
shapiro.test(srplants$SRpoll)
# Perform Shapiro-Wilk test on SRpoll
shapiro.test(srpoll$SRpoll)
## Perform correlation tests
cor.test(index$Index, srplants$SRplants, method = "spearman")
cor.test(index$Index, srpoll$SRpoll, method = "spearman")
cor.test(srplants$SRplants, srpoll$SRpoll)
cor.test(srplants$SRplants, srpoll$SRpoll, method = "spearman")
# SRplants and SRpoll
cor.test(srplants$SRplants, srpoll$SRpoll, method = "spearman")
reticulate::repl_python()
import sys
# Set path to proj.db file via the path to the conda environment currently in use
env = sys.prefix
proj = os.path.join(env, "Library/share/proj/")
os.environ['PROJ_LIB'] = proj
import rasterio
from osgeo import gdal, osr
src_path = "D:/distribution_digitizer-main/data/output/georeferencing/masks/georeferenced2_0064map_1_0__danna.tif"
dst_path = "D:/distribution_digitizer-main/data/output/georeferencing/masks/georeferenced2_0064map_1_0__danna_rectified.tif"
# open source dataset
src_ds = gdal.Open(src_path)
# set the target projection (example: WGS84)
target_projection = "+proj=longlat +datum=WGS84 +no_defs"
# perform rectification using gdal.Warp()
gdal.Warp(dst_path, src_ds, dstSRS=target_projection) # snippet: insert "-dstnodata=0"
quit
# start the main app
runApp('app.R') # the app itself
# start the main app
runApp('app.R') # the app itself
library(shiny)
# start the main app
runApp('app.R') # the app itself
use_python("C:/Users/user/miniconda3/python.exe")
library(reticulate) # Python binding for R.
# install.packages("reticulate") # start the RStudio as admin and hit Y when prompted for the miniconda installation
setwd("D:/distribution_digitizer-main/") # uncomment this line for setting the working directory manually.
getwd() # print the path to the working directory for copying into the Digitizer application (Field: "Working Directory").
library(shiny) # s
use_python("C:/Users/user/miniconda3/python.exe")
# start the main app
runApp('app.R') # the app itself
# start the main app
runApp('app.R') # the app itself
library(reticulate) # Python binding for R.
# install.packages("reticulate") # start the RStudio as admin and hit Y when prompted for the miniconda installation
setwd("D:/distribution_digitizer-main/") # uncomment this line for setting the working directory manually.
getwd() # print the path to the working directory for copying into the Digitizer application (Field: "Working Directory").
library(shiny)
use_python("C:/Users/user/miniconda3/python.exe")
library(reticulate) # Python binding for R.
# install.packages("reticulate") # start the RStudio as admin and hit Y when prompted for the miniconda installation
setwd("D:/distribution_digitizer-main/") # uncomment this line for setting the working directory manually.
getwd() # print the path to the working directory for copying into the Digitizer application (Field: "Working Directory").
library(shiny)
# use this row if you not use Anaconda or miniconda. the best way is to set the python system (environment)variables (Windows->system,...)
use_python("C:/Users/user/miniconda3/python.exe")
# start the main app
runApp('app.R') # the app itself
setwd("D:/distribution_digitizer-main/") # uncomment this line for setting the working directory manually.
setwd("D:dd/2023-07-25/distribution_digitizer-main/") # uncomment this line for setting the working directory manually.
setwd("D:/dd/2023-07-25/distribution_digitizer-main/") # uncomment this line for setting the working directory manually.
getwd()
reticulate::repl_python()
import sys
# Set path to proj.db file via the path to the conda environment currently in use
env = sys.prefix
proj = os.path.join(env, "Library/share/proj/")
os.environ['PROJ_LIB'] = proj
import rasterio
from osgeo import gdal, osr
def rectifying(input_raster, output_raster):
# open source dataset
src_ds = gdal.Open(input_raster)
# set the target projection (example: WGS84)
target_projection = "+proj=longlat +datum=WGS84 +no_defs"
# define name of output raster
dst_path = output_raster + "_rectified.tif"
# perform rectification using gdal.Warp()
gdal.Warp(dst_path, src_ds, dstSRS=target_projection)
def mainRectifying(workingDir):
output= workingDir + "/data/output/rectifying/"
os.makedirs(output, exist_ok=True)
inputdir = workingDir +"/data/output/georeferencing/masks/"
for input_raster in glob.glob(inputdir + "*.tif"):
print(input_raster)
dst_layername = os.path.basename(input_raster)
print(dst_layername)
output_raster = output + dst_layername
print(output_raster)
rectifying(input_raster, output_raster)
WorkingDir = "D:/dd/2023-07-25/distribution_digitizer-main"
workingDir = "D:/dd/2023-07-25/distribution_digitizer-main"
quit
# start the main app
runApp('app.R') # the app itself
workingDir = getwd()
workingDir
fname=paste0(workingDir, "/", "src/polygonize/rectifying.py")
fname
source_python(fname)
mainRectifying(workingDir)
# start the main app
runApp('app.R') # the app itself
mainRectifying(workingDir)
# start the main app
runApp('app.R') # the app itself
# start the main app
runApp('app.R') # the app itself
# start the main app
runApp('app.R') # the app itself
