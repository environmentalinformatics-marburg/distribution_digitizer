library(reticulate)
import cv2
reticulate::repl_python()
import cv2
import PIL
from PIL import Image
import os.path
import glob
import numpy as np
def edge(tiffile, outdir, n, m):
# Load image, grayscale, Otsu's threshold
ig = np.array(PIL.Image.open(tiffile))
gray = cv2.cvtColor(ig, cv2.COLOR_BGR2GRAY)
gray = cv2.GaussianBlur(gray, (m, m), 0)
ret, thresh = cv2.threshold(gray, 120, 255, cv2.THRESH_TOZERO_INV)
# Morph open using elliptical shaped kernel
kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (n, n))
opening = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel, iterations=3)
# Plot the mask
contours, hierarchy = cv2.findContours(opening, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
# Draw all contours and centroids
image = ig.copy()  # Create a copy of the original image
for contour in contours:
# Draw the contour
image = cv2.drawContours(image, [contour], -1, (0, 0, 255), 3)
# Calculate the centroid of the contour
M = cv2.moments(contour)
if M["m00"] != 0:
cX = int(M["m10"] / M["m00"])
cY = int(M["m01"] / M["m00"])
# Draw the centroid
cv2.circle(image, (cX, cY), 5, (0, 255, 0), -1)
# Save the image with contours and centroids
PIL.Image.fromarray(image, 'RGB').save(os.path.join(outdir, os.path.basename(tiffile))
# Edge and Contour Detection
def edge(tiffile, outdir, n, m):
# Load image, grayscale, Otsu's threshold
ig = np.array(PIL.Image.open(tiffile))
gray = cv2.cvtColor(ig, cv2.COLOR_BGR2GRAY)
gray = cv2.GaussianBlur(gray, (m, m), 0)
ret, thresh = cv2.threshold(gray, 120, 255, cv2.THRESH_TOZERO_INV)
# Morph open using elliptical shaped kernel
kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (n, n))
opening = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel, iterations=3)
# Plot the mask
contours, hierarchy = cv2.findContours(opening, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
# Draw all contours and centroids
image = ig.copy()  # Create a copy of the original image
for contour in contours:
# Draw the contour
image = cv2.drawContours(image, [contour], -1, (0, 0, 255), 3)
# Calculate the centroid of the contour
M = cv2.moments(contour)
if M["m00"] != 0:
cX = int(M["m10"] / M["m00"])
cY = int(M["m01"] / M["m00"])
# Draw the centroid
cv2.circle(image, (cX, cY), 5, (0, 255, 0), -1)
# Save the image with contours and centroids
PIL.Image.fromarray(image, 'RGB').save(os.path.join(outdir, os.path.basename(tiffile))
# Edge and Contour Detection
def edge(tiffile, outdir, n, m):
# Load image, grayscale, Otsu's threshold
ig = np.array(PIL.Image.open(tiffile))
gray = cv2.cvtColor(ig, cv2.COLOR_BGR2GRAY)
gray = cv2.GaussianBlur(gray, (m, m), 0)
ret, thresh = cv2.threshold(gray, 120, 255, cv2.THRESH_TOZERO_INV)
# Morph open using elliptical shaped kernel
kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (n, n))
opening = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel, iterations=3)
# Plot the mask
contours, hierarchy = cv2.findContours(opening, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
# Draw all contours and centroids
image = ig.copy()  # Create a copy of the original image
for contour in contours:
# Draw the contour
image = cv2.drawContours(image, [contour], -1, (0, 0, 255), 3)
# Calculate the centroid of the contour
M = cv2.moments(contour)
if M["m00"] != 0:
cX = int(M["m10"] / M["m00"])
cY = int(M["m01"] / M["m00"])
# Draw the centroid
cv2.circle(image, (cX, cY), 5, (0, 255, 0), -1)
# Save the image with contours and centroids
PIL.Image.fromarray(image, 'RGB').save(os.path.join(outdir, os.path.basename(tiffile))
image = cv2.drawContours(image, [contour], -1, (0, 0, 255), 3)
# Edge and Contour Detection
def edge(tiffile, outdir, n, m):
# Load image, grayscale, Otsu's threshold
ig = np.array(PIL.Image.open(tiffile))
gray = cv2.cvtColor(ig, cv2.COLOR_BGR2GRAY)
gray = cv2.GaussianBlur(gray, (m, m), 0)
ret, thresh = cv2.threshold(gray, 120, 255, cv2.THRESH_TOZERO_INV)
# Morph open using elliptical shaped kernel
kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (n, n))
opening = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel, iterations=3)
# Plot the mask
contours, hierarchy = cv2.findContours(opening, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
# Draw all contours and centroids
image = ig.copy()  # Create a copy of the original image
for contour in contours:
# Draw the contour
image = cv2.drawContours(image, [contour], -1, (0, 0, 255), 3)
# Calculate the centroid of the contour
M = cv2.moments(contour)
if M["m00"] != 0:
cX = int(M["m10"] / M["m00"])
cY = int(M["m01"] / M["m00"])
# Draw the centroid
cv2.circle(image, (cX, cY), 5, (0, 255, 0), -1)
# Save the image with contours and centroids
PIL.Image.fromarray(image, 'RGB').save(os.path.join(outdir, os.path.basename(tiffile))
# Edge and Contour Detection
def edge(tiffile, outdir, n, m):
# Load image, grayscale, Otsu's threshold
ig = np.array(PIL.Image.open(tiffile))
gray = cv2.cvtColor(ig, cv2.COLOR_BGR2GRAY)
gray = cv2.GaussianBlur(gray, (m, m), 0)
ret, thresh = cv2.threshold(gray, 120, 255, cv2.THRESH_TOZERO_INV)
# Morph open using elliptical shaped kernel
kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (n, n))
opening = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel, iterations=3)
# Plot the mask
contours, hierarchy = cv2.findContours(opening, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
# Draw all contours and centroids
image = ig.copy()  # Create a copy of the original image
for contour in contours:
# Draw the contour
image = cv2.drawContours(image, [contour], -1, (0, 0, 255), 3)
# Calculate the centroid of the contour
M = cv2.moments(contour)
if M["m00"] != 0:
cX = int(M["m10"] / M["m00"])
cY = int(M["m01"] / M["m00"])
# Draw the centroid
cv2.circle(image, (cX, cY), 5, (0, 255, 0), -1)
# Save the image with contours and centroids
PIL.Image.fromarray(image, 'RGB').save(os.path.join(outdir, os.path.basename(tiffile))
for contour in contours:
#Edge and Contour Detection
def edge(tiffile, outdir, n, m):
# Load image, grayscale, Otsu's threshold
ig = np.array(PIL.Image.open(tiffile))
gray = cv2.cvtColor(ig, cv2.COLOR_BGR2GRAY)
gray = cv2.GaussianBlur(gray,(m,m),0)
ret, thresh = cv2.threshold(gray,120,255,cv2.THRESH_TOZERO_INV)
# Morph open using elliptical shaped kernel
kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (n,n))
opening = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel, iterations=3)
#plot the mask
contours, hierarchy = cv2.findContours(opening, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
# Draw all contours and centroids
image = ig.copy()  # Create a copy of the original image
for contour in contours:
# Draw the contour
image = cv2.drawContours(image, [contour], -1, (0, 0, 255), 3)
# Calculate the centroid of the contour
M = cv2.moments(contour)
if M["m00"] != 0:
cX = int(M["m10"] / M["m00"])
cY = int(M["m01"] / M["m00"])
# Draw the centroid
cv2.circle(image, (cX, cY), 5, (0, 255, 0), -1)
# Save the image with contours and centroids
PIL.Image.fromarray(image, 'RGB').save(os.path.join(outdir, os.path.basename(tiffile))
ig = np.array(PIL.Image.open(tiffile))
gray = cv2.cvtColor(ig, cv2.COLOR_BGR2GRAY)
gray = cv2.GaussianBlur(gray,(m,m),0)
ret, thresh = cv2.threshold(gray,120,255,cv2.THRESH_TOZERO_INV)
# Morph open using elliptical shaped kernel
kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (n,n))
opening = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel, iterations=3)
#plot the mask
contours, hierarchy = cv2.findContours(opening, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
# Draw all contours and centroids
image = ig.copy()  # Create a copy of the original image
for contour in contours:
image = cv2.drawContours(image, [contour], -1, (0, 0, 255), 3)
# Calculate the centroid of the contour
M = cv2.moments(contour)
if M["m00"] != 0:
cX = int(M["m10"] / M["m00"])
cY = int(M["m01"] / M["m00"])
# Draw the centroid
cv2.circle(image, (cX, cY), 5, (0, 255, 0), -1)
# Save the image with contours and centroids
PIL.Image.fromarray(image, 'RGB').save(os.path.join(outdir, os.path.basename(tiffile))
def edge(tiffile, outdir, n, m):
# Load image, grayscale, Otsu's threshold
ig = np.array(PIL.Image.open(tiffile))
gray = cv2.cvtColor(ig, cv2.COLOR_BGR2GRAY)
gray = cv2.GaussianBlur(gray,(m,m),0)
ret, thresh = cv2.threshold(gray,120,255,cv2.THRESH_TOZERO_INV)
# Morph open using elliptical shaped kernel
kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (n,n))
opening = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel, iterations=3)
#plot the mask
contours, hierarchy = cv2.findContours(opening, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
# Draw all contours and centroids
image = ig.copy()  # Create a copy of the original image
for contour in contours:
image = cv2.drawContours(image, [contour], -1, (0, 0, 255), 3)
# Calculate the centroid of the contour
M = cv2.moments(contour)
if M["m00"] != 0:
cX = int(M["m10"] / M["m00"])
cY = int(M["m01"] / M["m00"])
# Draw the centroid
cv2.circle(image, (cX, cY), 5, (0, 255, 0), -1)
# Save the image with contours and centroids
PIL.Image.fromarray(image, 'RGB').save(os.path.join(outdir, os.path.basename(tiffile))
def edge(tiffile, outdir, n, m):
# Load image, grayscale, Otsu's threshold
ig = np.array(PIL.Image.open(tiffile))
gray = cv2.cvtColor(ig, cv2.COLOR_BGR2GRAY)
gray = cv2.GaussianBlur(gray,(m,m),0)
ret, thresh = cv2.threshold(gray,120,255,cv2.THRESH_TOZERO_INV)
# Morph open using elliptical shaped kernel
kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (n,n))
opening = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel, iterations=3)
#plot the mask
contours, hierarchy = cv2.findContours(opening, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
# Draw all contours and centroids
image = ig.copy()  # Create a copy of the original image
for contour in contours:
image = cv2.drawContours(image, [contour], -1, (0, 0, 255), 3) # Calculate the centroid of the contour
M = cv2.moments(contour)
if M["m00"] != 0:
cX = int(M["m10"] / M["m00"])
cY = int(M["m01"] / M["m00"])
cv2.circle(image, (cX, cY), 5, (0, 255, 0), -1) # Draw the centroid
PIL.Image.fromarray(image, 'RGB').save(os.path.join(outdir, os.path.basename(tiffile)) # Save the image with contours and centroids
cX = int(M["m10"] / M["m00"])
#Edge and Contour Detection
def edge(tiffile, outdir, n, m):
# Load image, grayscale, Otsu's threshold
ig = np.array(PIL.Image.open(tiffile))
gray = cv2.cvtColor(ig, cv2.COLOR_BGR2GRAY)
gray = cv2.GaussianBlur(gray, (m, m), 0)
ret, thresh = cv2.threshold(gray, 120, 255, cv2.THRESH_TOZERO_INV)
# Morph open using elliptical shaped kernel
kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (n, n))
opening = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel, iterations=3)
#plot the mask
contours, hierarchy = cv2.findContours(opening, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
# Draw all contours and centroids
image = ig.copy()  # Create a copy of the original image
for contour in contours:
image = cv2.drawContours(image, [contour], -1, (0, 0, 255), 3) # Calculate the centroid of the contour
M = cv2.moments(contour)
if M["m00"] != 0:
cX = int(M["m10"] / M["m00"])
cY = int(M["m01"] / M["m00"])
cv2.circle(image, (cX, cY), 5, (0, 255, 0), -1) # Draw the centroid
PIL.Image.fromarray(image, 'RGB').save(os.path.join(outdir, os.path.basename(tiffile))) # Save the image with contours and centroids
quit
library(reticulate) # Python binding for R.
setwd("D:/dd/2023-10-17/distribution_digitizer") # uncomment this line for setting the working directory manually.
getwd() # print the path to the working directory for copying into the Digitizer application (Field: "Working Directory").
library(shiny) # shiny library necessary for starting the app
# start the main app
runApp('app.R') # the app itself
# start the main app
runApp('app.R') # the app itself
